





import os
import sys
import subprocess
import mkToPy_2

FIRRTL_TRANSFORMS    = [\
	"sifive.enterprise.firrtl.MemToRegOfVecTransform" \
	,"firrtl.passes.InlineInstances" \
	,"sifive.enterprise.firrtl.ExampleTransform" \
	,"sifive.enterprise.firrtl.DontDedupTestHarnessSeqMems" \
	,"sifive.enterprise.firrtl.InjectDUTHierarchyTransform" \
	,"sifive.enterprise.firrtl.ExtractSeqMems" \
	,"sifive.enterprise.firrtl.ExtractSAGETransform" \
	,"sifive.enterprise.firrtl.ExtractClockGates" \
	,"sifive.enterprise.firrtl.ExtractBlackBoxesTransform" \
	,"sifive.enterprise.firrtl.SitestBlackBoxesTransform" \
	,"sifive.enterprise.firrtl.AddSeqMemPortsTransform" \
	,"sifive.enterprise.firrtl.ObfuscationTransform" \
	,"sifive.enterprise.firrtl.CoverPropReportTransform" \
	,"sifive.enterprise.firrtl.PrefixModulesTransform" \
	,"sifive.enterprise.firrtl.AddPreset" \
	,"sifive.enterprise.firrtl.TestHarnessHierarchyTransform" \
	,"sifive.enterprise.firrtl.SeqMemPathTransform" \
	,"sifive.enterprise.firrtl.HoistPassThroughConnections" \
	,"sifive.enterprise.grandcentral.GrandCentralTransform" \
	,"sifive.enterprise.firrtl.ExtractTestCodeTransform" \
	,"sifive.enterprise.firrtl.ModuleHierarchyTransform" \
	,"sifive.enterprise.firrtl.FileListTransform" \
	,"sifive.enterprise.firrtl.RegMappingTransform" \
	,"sifive.enterprise.firrtl.RetimeModulesTransform"
	]


def formattedStr(first, second, indent=False):
    if indent is False:
        return "\t\"" + first + "\": " + "\"" + second + "\",\n"
    else:
        return "\t\t" + "\t\"" + first + "\": " + "\"" + second + "\",\n"

def file_index_json_contents_top(federation_root, software_scripts_dir, \
        firrtl_build_dir, memgen_build_dir, package_build_dir, project_build_dir\
        ,verif_libraries_design_info_c, verif_libraries_build_dir\
        ,metadata_build_dir, sim_build_dir, variable_table): \

    CONFIG                              = "e31" #CHECKME
    software_scripts_dir                = os.path.join(federation_root, "software", "scripts")
    CREATE_GPT                          = os.path.join(software_scripts_dir, "create-gpt")
    MODEL                               = "e31"
    TB                                  = variable_table["TB"]
    design                              = variable_table["MODEL"] + "." + variable_table["CONFIG"]
    firrtl_build_dtb                    = os.path.join(firrtl_build_dir, CONFIG+".dtb")
    firrtl_build_dts                    = os.path.join(firrtl_build_dir, CONFIG+".dts")
    firrtl_build_dts_json               = os.path.join(firrtl_build_dir, CONFIG+".json")
    firrtl_build_elaborated_config_json = os.path.join(firrtl_build_dir, "elaborated_config.json")
    firrtl_build_object_model_json      = os.path.join(firrtl_build_dir, CONFIG+".objectModel.json")
    ELF_CONVERT                         = os.path.join(software_scripts_dir, "elf_convert.py")
    firrtl_build_dir                    = firrtl_build_dir
    formal_test_dir                     = os.path.join(federation_root, "software", "tests", "formal")
    ipdelivery_raw_files_dir            = os.path.join(federation_root, "ipdelivery", "UNIVERSAL", "raw_files")
    INPUT_CONFIG                        = variable_table["INPUT_CONFIG"]
    scripts_dir                         = os.path.join(federation_root, "scripts")
    SICC                                = os.path.join(software_scripts_dir, "sicc")
    SICC_MEE                            = os.path.join(software_scripts_dir, "sicc_mee")
    sim_testbench_v                     = os.path.join(federation_root, "vsrc", "sim", TB+".sv")
    deputy_dir                          = os.path.join(federation_root, "deputy")
    verif_libraries_design_info_c_dir   = verif_libraries_design_info_c
    verif_libraies_dir                  = verif_libraries_build_dir
    scripts_vroom_dir                   = os.path.join(scripts_dir, "vroom")
    sram_info_json                      = "" #CHECKME
    file_index_json                     = os.path.join(metadata_build_dir, "file_index.json")

    return \
    formattedStr("//",                              "File automatically generated by base.mk") + \
    formattedStr("add_size_header",                 software_scripts_dir+"/add_size_header.py")+\
    formattedStr("bin2denali",                      software_scripts_dir+"/bin2denali") + \
    formattedStr("bin2hex",                         software_scripts_dir+"/bin2hex") + \
    formattedStr("create_gpt",                      CREATE_GPT) + \
    formattedStr("elaborated_config_json",          firrtl_build_elaborated_config_json) + \
    formattedStr("object_model_json",               firrtl_build_object_model_json) + \
    formattedStr("federation_dir",                  federation_root) + \
    formattedStr("sim_build_dir",                   sim_build_dir) + \
    formattedStr("file_index_json",                 file_index_json) + \
    formattedStr("firrtl_build_dir",                firrtl_build_dir,   indent=True) + \
    formattedStr("run_gdb_self_checking_test",      scripts_dir + "/run-gdb-self-checking-test") + \
    formattedStr("sicc",                            SICC) + \
    formattedStr("sicc_mee",                        SICC_MEE) + \
    formattedStr("sitest_json_dir",                 federation_root + "/src/main/sitest") + \
    formattedStr("formal_test_dir",                 formal_test_dir,    indent=True) + \
    formattedStr("memgen_dir",                      memgen_build_dir) + \
    formattedStr("project_build_dir",               project_build_dir) + \
    formattedStr("verif_libraries_dir",             verif_libraries_build_dir)+ \
    formattedStr("verif_design_info_c_dir",         verif_libraries_design_info_c)



def file_index_json_contents_middle(federation_root, software_build_dir, federation_software_build_dir, variable_table):
    software_build_software_compilation_config          = os.path.join(software_build_dir, "compilation_config.json")
    software_bootloaders_dir                            = os.path.join(federation_software_build_dir, "bootloader")
    software_env_dir                                    = os.path.join(federation_software_build_dir, "env")
    software_test_dir                                   = os.path.join(federation_software_build_dir, "tests")
    TOOLCHAIN_CONFIG                                    = variable_table["TOOLCHAIN_CONFIG"]
    toolchain_build_include_dir                         = os.path.join(software_build_dir, "toolchain", "include")
    toolchain_build_linker_dir                          = os.path.join(software_build_dir, "toolchain", "linker")

    return \
    formattedStr("software_bootloaders_dir",            software_bootloaders_dir) + \
    formattedStr("software_dir",                        federation_software_build_dir) + \
    formattedStr("toolchain_config",                    TOOLCHAIN_CONFIG) + \
    formattedStr("software_test_crt",                   software_test_dir + "/common/crt.S") + \
    formattedStr("software_tests_dir",                  software_test_dir) + \
    formattedStr("software_compilation_config_json",    software_build_software_compilation_config) + \
    formattedStr("software_test_envs_dir",              software_env_dir) + \
    formattedStr("toolchain_include_dir",               toolchain_build_include_dir) + \
    formattedStr("toolchain_linker_script_dir",         toolchain_build_linker_dir)

#MISSING FPGA PART!!!!!!!!
#NEED TO MIGRATE FROM BASE.MK

def file_index_json_contents_bottom(metadata_build_dir, verilog_build_dir, variable_table,\
        package_build_json_dependencies = ['\"/scratch/ericc/work/make_fed_test/builds/coreip_e31_fcd/memgen/e31.rams.json\"', "null"],\
        core_name = "e31"):
    design = variable_table["MODEL"] + "." + variable_table["CONFIG"]

    verilog_module_hier_json            = os.path.join(metadata_build_dir, "module_hier.json")
    verilog_testharness_hier_json       = os.path.join(metadata_build_dir, "testharness_hier.json")
    verilog_build_design_dir            = os.path.join(verilog_build_dir, design)
    verilog_build_design_f              = os.path.join(verilog_build_dir, design+".F")
    verilog_design_vsrcs_f              = os.path.join(verilog_build_dir, design+".vsrcs.F") #FIXME
    verilog_build_assertions_vsrcs_f    = os.path.join(verilog_build_dir, design+".assertions.vsrcs.F")
    verilog_build_coverage_vsrcs_f      = os.path.join(verilog_build_dir, design+".coverage.vsrcs.F")
    verilog_build_grandcentral_vsrcs_f  = os.path.join(verilog_build_dir, "sifive_insight.vsrcs.F") #FIXME
    verilog_build_design_sitest         = os.path.join(verilog_build_dir, core_name+".sitest")
    verilog_build_testbench_sitest      = os.path.join(verilog_build_dir, core_name+".testbench.sitest") #FIXME
    verilog_testbench_f                 = os.path.join(verilog_build_dir, core_name+".testbench.F")#FIXME


    return \
        formattedStr("verilog_testbench_f",                 "") + \
        "\t\"verilog_jsons\": [\n\t\t" + \
        ",\n\t\t".join(package_build_json_dependencies) + \
        "\n\t]"
        #FIXME


def gen_file_index(\
        federation_root,\
        software_scripts_dir,\
        firrtl_build_dir,\
        memgen_build_dir,\
        package_build_dir,\
        project_build_dir,\
        verif_libraries_design_info_c,\
        verif_libraries_build_dir,\
        metadata_build_dir,\
        sim_build_dir,\
        software_build_dir,\
        verilog_build_dir,\
        variable_table):

    file_index_json = os.path.join(metadata_build_dir, "file_index.json")

    f       = open(file_index_json, "w")
    f.write("{\n")
    f.write(file_index_json_contents_top(\
            federation_root,\
            software_scripts_dir,\
            firrtl_build_dir,\
            memgen_build_dir,\
            package_build_dir,\
            project_build_dir,\
            verif_libraries_design_info_c,\
            verif_libraries_build_dir,\
            metadata_build_dir,\
            sim_build_dir,\
            variable_table
                ))

    federation_software_build_dir = os.path.join(federation_root, "software")
    f.write(file_index_json_contents_middle(federation_root, software_build_dir, federation_software_build_dir, variable_table) + "\n")
    f.write(file_index_json_contents_bottom(metadata_build_dir, verilog_build_dir, variable_table))
    f.write("\n}")
    f.close()


def create_F_file(reference_folder, file_type, F_file_dir):
    srcs = []
    append_dir = reference_folder.split(os.sep)[-1]
    for _, _, files in os.walk(reference_folder):
        files.sort()
        for f in files:
            if file_type in f:
                srcs.append(os.path.join(append_dir, f))

    f = open(F_file_dir, "w")
    for s in srcs: f.write(s + "\n")
    f.close()



def gen_config_sitest(sim_build_dir, metadata_build_dir, verilog_build_dir, memgen_build_dir,\
         core_name, variable_table, config_sitest_name = "config.sitest"):
    config_sitest   = os.path.join(sim_build_dir, config_sitest_name)
    top_module_name_src_file = os.path.join(metadata_build_dir, "module_hier.json")
    top_module_name = subprocess.check_output(\
            "jq -r '.module_name' " + top_module_name_src_file, shell=True).decode("utf-8").strip("\n")
    f               = open(config_sitest, "w+")
    f.write("#This is generated by replaceSim.py\n")
    f.write("enterprise_config "+"\'" + variable_table["CONFIG"] + "\'\n")
    f.write("makefile_config \'coreip_e31_fcd\'\n")
    f.write("file_index \'" + os.path.join(metadata_build_dir, "file_index.json") + "\'\n")
    f.write("breker_home \'/sifive/tools/breker/treksoc/treksoc-4.3.21_20191120_64b_el6\'\n")
    f.write("breker_treksoc_module \'breker/treksoc/4.3.21\'\n")
    f.write("breker_cohapp_module \'breker/coherencyTrekApp/1.0.22\'\n")
    f.write("top_module_name \'" + top_module_name + "\'\n")
    f.write("torture_false_sharing_granularity \'8\'\n")
    f.write("define_testbench(" + variable_table["SITEST_TESTBENCH_CONSTRUCTOR"] + " do\n")
    f.write("   allowed_boot_methods %i(" + variable_table["SITEST_BOOT_METHODS"] + ")\n")
    f.write("   load_file \'" + os.path.join(verilog_build_dir, core_name + ".sitest") + "\'\n")
    f.write("   load_file \'" + os.path.join(verilog_build_dir, core_name + ".testbench.sitest") + "\'\n")
    f.write("   load_json \'" + os.path.join(memgen_build_dir,  core_name + ".rams.json") + "\'\n")
    f.write("   load_json \'" + os.path.join(sim_build_dir, "rtl.json") + "\'\n")
    f.write("end)\n")
    f.close()




def rtl_json_formated_string(first, second):
    return "\t\t\"+" + first + "+" + second + "\",\n"


def try_except_grep(cd_dir, grep_criteria):
    try:
        return subprocess.check_output("cd " + cd_dir + " && find . | grep " + grep_criteria, shell=True)
    except subprocess.CalledProcessError as e:
        if e.returncode > 1:
            raise
        return b''


def gen_rtl_json(verilog_build_design_dir, verilog_build_testbench_dir, sim_build_dir, \
        verif_design_info_sv_dir, federation_root, SIM_CLOCK_PERIOD, TB, test_indicator_module_name, MODEL):



    cc_files_in_verilog_build_design_dir        = try_except_grep(verilog_build_design_dir,    ".cc")
    cc_files_in_verilog_build_testbench_dir     = try_except_grep(verilog_build_testbench_dir, ".cc")

    v_files_in_verilog_build_design_dir         = try_except_grep(verilog_build_design_dir    , ".v" )
    sv_files_in_verilog_build_design_dir        = try_except_grep(verilog_build_design_dir    , ".sv")
    v_files_in_verilog_build_testbench_dir      = try_except_grep(verilog_build_testbench_dir , ".v" )
    sv_files_in_verilog_build_testbench_dir     = try_except_grep(verilog_build_testbench_dir , ".sv")


    cc_files_in_verilog_build_design_dir        = cc_files_in_verilog_build_design_dir.decode("utf-8").rstrip("\n\t ").split("\n")
    cc_files_in_verilog_build_testbench_dir     = cc_files_in_verilog_build_testbench_dir.decode("utf-8").rstrip("\n\t ").split("\n")
    v_files_in_verilog_build_design_dir         = v_files_in_verilog_build_design_dir.decode("utf-8").rstrip("\n\t ").split("\n")
    sv_files_in_verilog_build_design_dir        = sv_files_in_verilog_build_design_dir.decode("utf-8").rstrip("\n\t ").split("\n")
    v_files_in_verilog_build_testbench_dir      = v_files_in_verilog_build_testbench_dir.decode("utf-8").rstrip("\n\t ").split("\n")
    sv_files_in_verilog_build_testbench_dir     = sv_files_in_verilog_build_testbench_dir.decode("utf-8").rstrip("\n\t ").split("\n")

    cc_files_in_verilog_build_design_dir        = None if not cc_files_in_verilog_build_design_dir \
                                                    else cc_files_in_verilog_build_design_dir
    cc_files_in_verilog_build_testbench_dir     = None if not cc_files_in_verilog_build_testbench_dir \
                                                    else cc_files_in_verilog_build_testbench_dir
    v_files_in_verilog_build_design_dir         = None if not v_files_in_verilog_build_design_dir \
                                                    else v_files_in_verilog_build_design_dir
    sv_files_in_verilog_build_design_dir        = None if not sv_files_in_verilog_build_design_dir \
                                                    else sv_files_in_verilog_build_design_dir
    v_files_in_verilog_build_testbench_dir      = None if not v_files_in_verilog_build_testbench_dir \
                                                    else v_files_in_verilog_build_testbench_dir
    sv_files_in_verilog_build_testbench_dir     = None if not sv_files_in_verilog_build_testbench_dir \
                                                    else sv_files_in_verilog_build_testbench_dir


    v_files_in_verilog_build_design_dir         = map(lambda x: \
                                                    os.path.join(verilog_build_design_dir, x), \
                                                    v_files_in_verilog_build_design_dir)
    sv_files_in_verilog_build_design_dir        = map(lambda x: \
                                                    os.path.join(verilog_build_design_dir, x), \
                                                    sv_files_in_verilog_build_design_dir)
    v_files_in_verilog_build_testbench_dir      = map(lambda x: \
                                                    os.path.join(verilog_build_testbench_dir, x), \
                                                    v_files_in_verilog_build_testbench_dir)
    sv_files_in_verilog_build_testbench_dir     = map(lambda x: \
                                                    os.path.join(verilog_build_testbench_dir,x), \
                                                    sv_files_in_verilog_build_testbench_dir)

    v_files_in_verilog_build_design_dir         = \
            [item for item in v_files_in_verilog_build_design_dir if os.path.isfile(item)]
    sv_files_in_verilog_build_design_dir        = \
            [item for item in sv_files_in_verilog_build_design_dir if os.path.isfile(item)]
    v_files_in_verilog_build_testbench_dir      = \
            [item for item in v_files_in_verilog_build_testbench_dir if os.path.isfile(item)]
    sv_files_in_verilog_build_testbench_dir     = \
            [item for item in sv_files_in_verilog_build_testbench_dir if os.path.isfile(item)]

    rtl_json                                = os.path.join(sim_build_dir, "rtl.json")
    f                                       = open(rtl_json, "w+")
    sim_testbench_v                         = os.path.join(federation_root, "vsrc", "sim", TB+".sv")
    f.write("{\n")
    f.write("\t\"csrcs\":[")
    #f.write("\t\t"+",\n\t\t".join(map(lambda x: "\"" + os.path.join(verilog_build_design_dir, x)\
    #                + "\"", cc_files_in_verilog_build_design_dir)))
    #f.write("\t\t"+",\n\t\t".join(map(lambda x: "\"" + os.path.join(verilog_build_testbench_dir, x)\
    #                + "\"", cc_files_in_verilog_build_testbench_dir)))
    #FIXME
    f.write("\n\t\t" + "null" + "\n],\n\"vsrcs\":[\n")
    f.write(",\n\t\t".join(map(lambda x: "\"" + os.path.join(verilog_build_design_dir, x)\
                    + "\"", v_files_in_verilog_build_design_dir)))
    f.write(",\n\t\t")
    f.write(",\n\t\t".join(map(lambda x: "\"" + os.path.join(verilog_build_design_dir, x)\
                    + "\"", sv_files_in_verilog_build_design_dir)))
    f.write(",\n\t\t")
    f.write(",\n\t\t".join(map(lambda x: "\"" + os.path.join(verilog_build_testbench_dir, x)\
                    + "\"", v_files_in_verilog_build_testbench_dir)))
    f.write(",\n\t\t")
    f.write(",\n\t\t".join(map(lambda x: "\"" + os.path.join(verilog_build_testbench_dir, x)\
                    + "\"", sv_files_in_verilog_build_testbench_dir)))
    f.write(",\n\t\t")
    f.write("\n\t\t" + "\"" + sim_testbench_v + "\"\n")
    f.write("\t],\n\"compile_opts\":[\n")
    f.write(rtl_json_formated_string("incdir", sim_build_dir))
    f.write(rtl_json_formated_string("incdir", verif_design_info_sv_dir))
    f.write(rtl_json_formated_string("incdir", os.path.join(federation_root, "vsrc")))
    f.write(rtl_json_formated_string("incdir", os.path.join(federation_root, "vsrc", "sifive")))
    f.write(rtl_json_formated_string("incdir", os.path.join(federation_root, "vsrc", "sifive", "uvm")))
    f.write(rtl_json_formated_string("incdir", os.path.join(federation_root, "vsrc", "sifive", "uvm", "amba")))
    f.write(rtl_json_formated_string("define", "CLOCK_PERIOD=" + SIM_CLOCK_PERIOD))
    f.write(rtl_json_formated_string("define", "PRINTF_COND=" + TB + ".printf_cond"))
    f.write(rtl_json_formated_string("define", "STOP_COND=!"  + TB + ".reset"))
    f.write(rtl_json_formated_string("define", "RANDOMIZE_MEM_INIT"))
    f.write(rtl_json_formated_string("define", "RANDOMIZE_REG_INIT"))
    f.write(rtl_json_formated_string("define", "RANDOMIZE_GARBAGE_ASSIGN"))
    f.write(rtl_json_formated_string("define", "RANDOMIZE_INVALID_ASSIGN"))
    f.write(rtl_json_formated_string("define", "RANDOMIZE_DELAY=2"))
    f.write(rtl_json_formated_string("define", "USE_OBHAV_MODELS"))
    f.write(rtl_json_formated_string("define", "TEST_INDICATOR_MODULE_NAME=" + test_indicator_module_name))
    f.write(rtl_json_formated_string("define", "MODEL=" + MODEL))
    f.write(rtl_json_formated_string("libext", ".v+.sv"))
    f.write("\t\t\"+notimingchecks\"\n")
    f.write("\t]\n")
    f.write("}")



def config_sitest_formatted_string(first, second):
    return first + " \'" + second + "\'"

def gen_config_sitest_more_accurate(\
        sim_build_dir,\
        CONFIG,\
        project_build_dir,\
        file_index_json,\
        BREKER_HOME,\
        MODULE_BREKER_TREKSOC,\
        MODULE_BREKER_COHAPP,\
        design_top_module_name,\
        TORTURE_FALSE_SHARING_GRANULARITY,\
        SITEST_TESTBENCH_CONSTRUCTOR,\
        SITEST_BOOT_METHODS,\
        verilog_build_design_sitest,\
        verilog_build_testbench_sitest,\
        package_build_json_dependencies,\
        sim_build_rtl_json,\
        variable_table
    ):
    config_sitest   = os.path.join(sim_build_dir, "config.sitest")
    f               = open(config_sitest, "w+")
    f.write("#create by replaceSIm\n")
    f.write(config_sitest_formatted_string("enterprise_config",     CONFIG) + "\n")
    f.write(config_sitest_formatted_string("makefile_config",       project_build_dir)      + "\n") #CHECKME
    f.write(config_sitest_formatted_string("file_index",            file_index_json)        + "\n")
    f.write(config_sitest_formatted_string("breker_home",           BREKER_HOME)            + "\n")
    f.write(config_sitest_formatted_string("breker_treksoc_module", MODULE_BREKER_TREKSOC)  + "\n")
    f.write(config_sitest_formatted_string("breker_cohapp_module",  MODULE_BREKER_COHAPP)   + "\n")
    f.write(config_sitest_formatted_string("top_module_name",       design_top_module_name) + "\n")
    f.write(config_sitest_formatted_string("torture_false_sharing_granularity",\
                                                TORTURE_FALSE_SHARING_GRANULARITY)          + "\n")
    f.write("define_testbench(Testbench::ECoreIP.new(readmemh_target: :any) do)\n")
    f.write("   allowed_boot_methods %i(testharness_ram)\n")
    f.write("\t" + config_sitest_formatted_string("load_file",      verilog_build_design_sitest)    + "\n")
    f.write("\t" + config_sitest_formatted_string("load_file",      verilog_build_testbench_sitest) + "\n")
    f.write("\t" + config_sitest_formatted_string("load_json",      sim_build_rtl_json)             + "\n")
    f.write("\t" + config_sitest_formatted_string("load_json",      package_build_json_dependencies[0]) + "\n")
    f.write("end)")
    f.close()



def soft_link(Dir, link_name, link_dest):
    symlink = os.path.join(Dir, link_name)
    os.symlink(link_dest, symlink)



def main():

    wake_build      = ""
    federation_root = ""
    core_name       = "e31" #if not otherwise specify
    if   len(sys.argv) == 3:
            wake_build, federation_root = sys.argv[1], sys.argv[2]
    elif len(sys.argv) == 4:
            wake_build, federation_root, makefile = sys.argv[1], sys.argv[2], sys.argv[3]
            #core_name = makefile.split(".")[0]
    else:
        print("Usage: python replaceSim_0309.py wake_build_dir federation_root_dir [core_name, such as e31]")

    _, variable_table = mkToPy_2.readAllMakefile(makefile)
    toolchain  =  variable_table["TOOLCHAIN_CONFIG"].split(os.sep)
    variable_table["TOOLCHAIN_CONFIG"] = os.path.join(federation_root, "software", toolchain[1], toolchain[2])
#==========================================Path Setup========================================
    MODEL                   = variable_table["MODEL"]
    CONFIG                  = variable_table["CONFIG"]
    build_dir               = os.path.join(federation_root, "builds", "coreip_" + core_name + "_fcd_try")
    metadata_build_dir      = os.path.join(build_dir, "metadata")
    rocketchip_root         = os.path.join(federation_root, "rocket-chip")
    firrtl_tool_src_root    = os.path.join(rocketchip_root, "firrtl")
    firrtl_jar              = os.path.join(rocketchip_root, "lib", "firrtl.jar")
    firrtl_build_dir        = os.path.join(build_dir, "firrtl")
    verilog_build_dir       = os.path.join(build_dir, "verilog")

    federation_jar              = os.path.join(federation_root, "builds", "federation.jar")
    fedr_CMDLINE_ANNO_FILE      = os.path.join(verilog_build_dir, core_name + ".cmdline.anno.json")
    verilog_build_design_dir    = os.path.join(verilog_build_dir, MODEL + "." + CONFIG)
    verilog_build_testbn_dir    = os.path.join(verilog_build_dir, \
            MODEL + "." + CONFIG + ".testbench")
    verilog_build_conf          = os.path.join(verilog_build_dir, \
            MODEL + "." + CONFIG + ".conf")
    verilog_build_dir_conf       = os.path.join(verilog_build_dir, \
            MODEL + "." + CONFIG + ".conf")

    verif_build_dir                    = os.path.join(build_dir, "verif")
    verif_libraries_build_dir          = os.path.join(verif_build_dir, "libraries")
    verif_libraries_design_info_c      = os.path.join(verif_libraries_build_dir, "design_info", "c")
    verif_libraries_design_info_sv     = os.path.join(verif_libraries_build_dir, "design_info", "sv")
    verif_libraries_design_info_tcl    = os.path.join(verif_libraries_build_dir, "design_info", "tcl")

    vroom_exe                           = os.path.join(federation_root, "scripts", "vroom", "vroom.py")
    _object_model                       = os.path.join(firrtl_build_dir, core_name + ".objectModel.json")
    memgen_build_dir                    = os.path.join(build_dir, "memgen")
    memgen_build_rams_v                 = os.path.join(memgen_build_dir, core_name + ".rams.v")
    memgen_conf_json                    = os.path.join(federation_root, "vlsi-mem", "mem_gen_config.json")
    memgen_build_memalpha_meta          = os.path.join(memgen_build_dir, core_name + ".memalpha.json")
    MEM_GEN                             = os.path.join(federation_root, "vlsi-mem/vlsi_mem_gen.behavioral-DPI")

    memgen_build_rams_json              = os.path.join(memgen_build_dir, core_name + ".rams.json")
    MEMALPHA                            = os.path.join(federation_root, "memory-alpha", "bin", "memalpha")

    firrtl_build_elaborated_config_json = os.path.join(firrtl_build_dir, "elaborated_config.json")
    firrtl_build_dts_json               = os.path.join(firrtl_build_dir, core_name + ".json") #NOTICEME
    INPUT_CONFIG                        = os.path.join(federation_root, "configs", core_name + ".yml")
    BUILD_ELABORATED_CONFIG_JSON        = os.path.join(federation_root, "scripts", "build-elaborated-config-json.py")

    software_build_dir                          = os.path.join(build_dir, "software")
    software_build_software_compilation_config  = os.path.join(software_build_dir, "compilation_config.json")

    software_dir                                = os.path.join(federation_root, "software")
    software_toolchain_dir                      = os.path.join(software_dir, "toolchain")
    toolchain_build_toolchain                   = os.path.join(software_toolchain_dir, "build_toolchain.py")
    TOOLCHAIN_CONFIG                            = variable_table["TOOLCHAIN_CONFIG"]
    firrtl_build_iof_json                       = os.path.join(firrtl_build_dir, core_name + ".iof.json")
    toolchain_build_dir                         = os.path.join(build_dir, "software", "toolchain")

    software_scripts_dir                        = os.path.join(software_dir, "scripts")
    BUILD_MEMINFO_LIB                           = os.path.join(software_scripts_dir, "build-meminfo-lib")
    toolchain_build_meminfo_dir                 = os.path.join(toolchain_build_dir, "libraries", "meminfo")
    BUILD_HARTINFO_LIB                          = os.path.join(software_scripts_dir, "build-hartinfo-lib")
    toolchain_build_hartinfo_dir                = os.path.join(toolchain_build_dir, "libraries", "hartinfo")

    package_build_dir                           = ""
    sim_build_dir                               = os.path.join(build_dir, "sim")
#=============================================Path setup done======================================================




    #copy file_index.json --> builds/coreip_e31/metadata/
    os.makedirs(metadata_build_dir)
    os.makedirs(verilog_build_dir)
    #original_file_index = os.path.join(federation_root, "builds", "coreip_" + core_name + "_fcd", "metadata", "file_index.json")
    #os.system("cp " + original_file_index + " " + metadata_build_dir)
    gen_file_index(\
            federation_root,\
            software_scripts_dir,\
            firrtl_build_dir, \
            memgen_build_dir,\
            package_build_dir,\
            build_dir,\
            verif_libraries_design_info_c,\
            verif_libraries_build_dir,\
            metadata_build_dir,\
            sim_build_dir,\
            software_build_dir,\
            verilog_build_dir,\
            variable_table
    ) #ACTION

    #copy builds/coreip_e31_fcd/sim -->builds/coreip_e31_fcd_try/
    #original_sim_folder = os.path.join(federation_root, "builds", "coreip_" + core_name + "_fcd", "sim")
    #os.system("cp -r " + original_sim_folder + " " + build_dir)


    #Input:     build.sbt
    #Output:    firrtl.jar
    mkdir       = os.path.dirname(firrtl_jar) #get dir
    cd          = firrtl_tool_src_root
    cpTarget    = os.path.join(firrtl_tool_src_root, "utils", "bin", "firrtl.jar")
    cpDest      = firrtl_jar
    #do_firrtl_jar(mkdir, cd, cpTarget, cpDest) #ACTION


    #Input:     build.sbt
    #Output:    federation.jar

    mkdir           = os.path.dirname(federation_jar) #get dir
    cd              = federation_root
    #do_federation_jar(mkdir, cd) #ACTION


    #Wit/Wake/:firrtl           -->   build/coreip/firrtl
    wake_firrtl = os.path.join(wake_build, "firrtl")
    os.system("cp -r " + wake_firrtl + " " + build_dir) #ACTION, since it's copied, could be wrong

    #Wit/Wake:e31.sitest        -->   build/coreip/verilog
    wake_sitest = os.path.join(wake_build, "verilog", core_name + ".sitest")
    os.system("cp " + wake_sitest + " " + verilog_build_dir)

    #Wit/Wake: e31.testbench.sitest --> build/coreip/verilog
    wake_testbn_sitest = os.path.join(wake_build, "verilog", core_name + ".testbench.sitest")
    os.system("cp " + wake_testbn_sitest + " " + verilog_build_dir)



#==========================================================================================
    #verilog_build_conf
        #Wit/Wake:metadata/*   -->   build/coreip/metadata/
    wake_metadata = os.path.join(wake_build, "metadata", "*")
    os.system("cp -r " + wake_metadata + " " + metadata_build_dir)

    #FIRRTL cmd
    wake_CMDLINE_ANNO_FILE      = os.path.join(wake_build, "firrtl", core_name + ".cmdline.anno.json")
            #Wit/Wake:firrtl/e31.cmdline.anno.json      -->     build/verilog/e31.cmdline.anno.json
    os.system("cp " + wake_CMDLINE_ANNO_FILE + " " + fedr_CMDLINE_ANNO_FILE)
    VERILOG_ANNO_FILES_LIST     = [os.path.join(firrtl_build_dir, core_name + ".anno.json"),
                                    os.path.join(verilog_build_dir, core_name + ".cmdline.anno.json")]
    JAVA                        = "/usr/bin/java "
    FIRRTL_MAX_HEAP             = variable_table["FIRRTL_MAX_HEAP"]
    FIRRTL_MAX_STACK            = variable_table["FIRRTL_MAX_STACK"]
    FIRRTL_MAIN                 = variable_table["FIRRTL_MAIN"]
    MODEL                       = variable_table["MODEL"]
    FIRRTL                      = JAVA + "-Xmx" + FIRRTL_MAX_HEAP + " -Xss" + \
                                    FIRRTL_MAX_STACK +  " -cp " + federation_jar + " " + FIRRTL_MAIN
    VERILOG_FIRRTL_ARGS         = "--infer-rw" + " " + MODEL + " "\
                                  "--repl-seq-mem -c:" + MODEL + ":-o:" + verilog_build_conf + " " +\
                                  "--split-modules -tn " + MODEL + " " +\
                                  "-td " + verilog_build_design_dir + " "  + \
                                  "-fct " + ",".join(FIRRTL_TRANSFORMS) + " " + \
                                  " -faf " + " -faf ".join(VERILOG_ANNO_FILES_LIST) + " -ll info "
    FIRRTL_CMDLINE              = FIRRTL + " -i " + os.path.join(firrtl_build_dir, core_name + ".pb") + \
                                    " -X verilog " + VERILOG_FIRRTL_ARGS
        #Input:     e31.cmdline.anno.json
        #Output:    CoreIPSubsystemAllPortRAMTestHarness.SiFiveCoreDesignerAlterations.conf && .V files
    #os.system(FIRRTL_CMDLINE) #ACTION
    print(FIRRTL_CMDLINE)
#==============================================================================================

    wake_verilog_design_folder   = os.path.join(wake_build, "verilog", "design", "*")
    wake_verilog_testbn_folder   = os.path.join(wake_build, "verilog", "testbench", "*")
    wake_firrtl_memcon_file      = os.path.join(wake_build, "firrtl",  "mems.conf")

    os.makedirs(verilog_build_design_dir)
    os.makedirs(verilog_build_testbn_dir)
    #Wit/Wake: verilog/design       -->         build/coreip/verilog/CoreIPSubsystemAllPortRAMTestHarness.SiFiveCoreDesignerAlterations
    os.system("cp -r " + wake_verilog_design_folder + " " + verilog_build_design_dir)
    #Wit/Wake: verilog/testbench    -->         build/coreip/verilog/CoreIPSubsystemAllPortRAMTestHarness.SiFiveCoreDesignerAlterations.testbench
    os.system("cp -r " + wake_verilog_testbn_folder + " " + verilog_build_testbn_dir)

    os.system("cp -r " + wake_firrtl_memcon_file + " " + verilog_build_dir_conf)

    #_vsrcs_F             = os.path.join(verilog_build_dir, \
    #                            "CoreIPSubsystemAllPortRAMVerificationTestHarnessWithDPIC." + core_name + ".vsrcs.F")
    #_F                   = os.path.join(verilog_build_dir, \
    #                            "CoreIPSubsystemAllPortRAMVerificationTestHarnessWithDPIC." + core_name + ".F")
    #_vsrcs_testbn_F      = os.path.join(verilog_build_dir, \
    #                            "CoreIPSubsystemAllPortRAMVerificationTestHarnessWithDPIC." + core_name + ".testbench.vsrcs.F")
    #_testbn_F            = os.path.join(verilog_build_dir, \
    #                            "CoreIPSubsystemAllPortRAMVerificationTestHarnessWithDPIC." + core_name + ".testbench.F")


    _testbn_F   = \
            os.path.join(verilog_build_dir, variable_table["MODEL"] + core_name + ".testbench.F")

    _vsrcs_F    = \
            os.path.join(verilog_build_dir, variable_table["MODEL"] + core_name + ".vsrcs.F")

    _F          = \
            os.path.join(verilog_build_dir, variable_table["MODEL"] + core_name + ".F")

    _vsrcs_testbn_F = \
            os.path.join(verilog_build_dir, variable_table["MODEL"] + core_name + ".testbench.vsrcs.F")




    os.system("touch " + _vsrcs_F)
    os.system("touch " + _vsrcs_testbn_F)
    os.system("touch " + _F)
    os.system("touch " + _testbn_F)

    #Input:     build/coreip/verilog/CoreIPSubsystemAllPortRAMTestHarness.SiFiveCoreDesignerAlterations/.v
    #Input:     build/coreip/verilog/CoreIPSubsystemAllPortRAMTestHarness.SiFiveCoreDesignerAlterations.testbench/.v

    #Output:    build/coreip/verilog/CoreIPSubsystemAllPortRAMVerificationTestHarnessWithDPIC.e31.vsrcs.F
    #Output:    build/coreip/verilog/CoreIPSubsystemAllPortRAMVerificationTestHarnessWithDPIC.e31.F
    #Output:    build/coreip/verilog/CoreIPSubsystemAllPortRAMVerificationTestHarnessWithDPIC.e31.testbench.vsrcs.F
    #Output:    build/coreip/verilog/CoreIPSubsystemAllPortRAMVerificationTestHarnessWithDPIC.e31.testbench.F
    create_F_file(verilog_build_design_dir, "", _vsrcs_F)
    create_F_file(verilog_build_testbn_dir, "", _vsrcs_testbn_F)
    create_F_file(verilog_build_design_dir, "", _F)
    create_F_file(verilog_build_testbn_dir, "", _testbn_F)

    #VROOM
    #create verif/libraries/design_info c, sv, tcl
    #prepare directory for vroom.py
    os.makedirs(verif_libraries_design_info_c)
    os.makedirs(verif_libraries_design_info_sv)
    os.makedirs(verif_libraries_design_info_tcl)

    #Input:     build/coreip/firrtl/e31.objectModel.json
    #Input:     build/coreip/firrtl/e31.AHBPortRAMSlave_AddressMap_1.json
    #Input:     build/coreip/firrtl/e31.AHBPortRAMSlave_AddressMap_2.json

    #Output:    build/coreip/verif/libraries/design_info/c/*
    #Output:    build/coreip/verif/libraries/design_info/sv/*
    #Output:    build/coreip/verif/libraries/design_info/tcl/*
    vroom_sram_info_arg     = "" #FIXME
    test_mem                = subprocess.check_output("cd " + firrtl_build_dir + " && find . | grep AHBPortRAMSlave_AddressMap"\
                                , shell=True)

    test_mem_arr            = test_mem.decode("utf-8").rstrip("\n").split("\n")
    test_mem_absPath_arr    = map(lambda x: os.path.join(firrtl_build_dir, x), test_mem_arr)
    test_mem_as_arg         = map(lambda x: " --test-memory-json " + x, test_mem_absPath_arr)
    test_mem_partial_cmd    = " ".join(test_mem_as_arg)
    c_partial_cmd           = " --gen-c --ovrd-c-out-dir=" + verif_libraries_design_info_c + " " + vroom_sram_info_arg
    sv_partial_cmd          = " --gen-sv --ovrd-sv-out-file=" + verif_libraries_design_info_sv + "/sifive_amba_system_config.sv"
    tcl_partial_cmd         = " --gen-tcl --ovrd-tcl-out-file=" + verif_libraries_design_info_tcl + "/ominfo.tcl"
    full_vroom_cmd          = vroom_exe + " " + _object_model + c_partial_cmd \
                            + sv_partial_cmd + tcl_partial_cmd + test_mem_partial_cmd
    os.system(full_vroom_cmd)
    print(full_vroom_cmd)



    #MEMGEN
        #preMemGen
        #create memgen directory
    os.makedirs(memgen_build_dir)

    #dpi_raminfo
    #Input:     /sifive/vip/ieee/1800-2017/include
    #Input:     build/coreip/verif/libraries/design_info/c/dpi_raminfo.c

    #Output:    build/coreip/memgen/dpi_raminfo.o
    CXX         = "/sifive/tools/gcc/7.2.0/bin/g++"
    svdpi_dir   = "/sifive/vip/ieee/1800-2017/include"
    cmd         = CXX + " -c -Wall -Wno-unused-variable -I" + svdpi_dir + " " + \
                    os.path.join(verif_libraries_design_info_c, "dpi_raminfo.c") + " -o " + \
                    os.path.join(memgen_build_dir, "dpi_raminfo.o")
    os.system(cmd)

    #mem_gen_dpi
    #Input:     federation/vlsi-mem/mem_gen_dpi.cpp
    #Input:     build/coreip/verif/libraries/design_info/tcl/*

    #Ouput:     build/coreip/memgen/mem_gen_dpi.o
    vlsi_mem_dir = os.path.join(federation_root, "vlsi-mem")
    cmd         = CXX + " -c -Wall -std=c++17 -I"\
                    +svdpi_dir + " -I" + verif_libraries_design_info_tcl \
                    + " " +  os.path.join(vlsi_mem_dir, "mem_gen_dpi.cpp") \
                    + " -o " + os.path.join(memgen_build_dir, "mem_gen_dpi.o")
    os.system(cmd)

    #dpi_mem_api
    #Input:     build/coreip/memgen/mem_gen_dpi.o
    #Input:     build/coreip/memgen/dpi_raminfo.o

    #Output:    build/coreip/memgen/mem_gen_dpi.a
    cmd = "ar -r " + os.path.join(memgen_build_dir, "mem_gen_dpi.a") + " " +\
            os.path.join(memgen_build_dir, "mem_gen_dpi.o") + " " +\
            os.path.join(memgen_build_dir, "dpi_raminfo.o")
    os.system(cmd)

        #realMemGen
        #Output:    build/coreip/memgen/memalpha.json
        #Output:    build/coreip/memgen/rams.v
    INTERACTIVE                     = False
    MEMORY_COMPILER_SIZE_THRESHOLD  = str(0)
    #PREPEND_MEMORY_WRAPPER          = False #CHECKME
    #APPEND_MEMORY_WRAPPER           = False #CHECKME
    #MEMORY_MODULE_SKIP_LIST         = False #CHECKME
    interactive                     = " --interactive " if INTERACTIVE is True else  " "
    compiler_size                   = " --compiler-size-threshold " + MEMORY_COMPILER_SIZE_THRESHOLD
    iconf                           = " --iconf " + verilog_build_conf
    param_json                      = " --param_json " + memgen_conf_json
    oconf                           = " --oconf " + memgen_build_memalpha_meta
    wrper                           = " --wrapper " + memgen_build_rams_v
    #prepend_mem                     = (" --prepend-verilog-source " + PREPEND_MEMORY_WRAPPER) if \
    #                                    PREPEND_MEMORY_WRAPPER is True else " "
    #appned_mem                      = (" --append-verilog-source " + APPEND_MEMORY_WRAPPER ) if \
    #                                    APPEND_MEMORY_WRAPPER is True  else " "
    #module_skip_list                = (" --skip-list" + MEMORY_MODULE_SKIP_LIST) if \
    #                                    MEMORY_MODULE_SKIP_LIST is True else " "
    full_cmd                        =\
                                        MEM_GEN + interactive + compiler_size + iconf + param_json + \
                                        oconf + wrper
    os.system(full_cmd)


    #memgen_build_rams_json
    #Input:     build/coreip/memgen/e31.memalpha.json

    #Output:    build/coreip/memgen/e31.rams.json
    memgen_macro_dir                = "/work/memory/staging"
    cmdline                         = MEMALPHA \
                                        + " sitest -d " + memgen_macro_dir \
                                        + " --vlib " + memgen_build_rams_v \
                                        + " " + memgen_build_rams_json \
                                        + " < " + memgen_build_memalpha_meta
    os.system(cmdline)


    #verif_dir_built
    #Input:     build/coreip/firrtl/e31.json
    #Input:     build/coreip/firrtl/e31.AHBPortRAMSlave_AddressMap_1.json
    #Input:     build/coreip/firrtl/e31.AHBPortRAMSlave_AddressMap_2.json
    #Input:     federation/configs/e31.yml

    #Output:    build/coreip/firrtl/elaborated_config.json
    #I'm missing one line for the following cmd, but in this case it doesn't matter
    BUILD_cmd                       = BUILD_ELABORATED_CONFIG_JSON +" --dts-json " + firrtl_build_dts_json + " " + \
                                        test_mem_partial_cmd + " " + \
                                        "--input-config=" + INPUT_CONFIG + \
                                        " --output " + os.path.join(firrtl_build_dir, "elaborated_config.json")
    os.system(BUILD_cmd)



    #software_build_software_compilation_config
    #Input:     some variables

    #Output:    build/coreip/software/compilation_config.json
    os.makedirs(software_build_dir)
    XCCMODEL = variable_table["XCCMODEL"]
    TEST_ENV = variable_table["TEST_ENV"]
    f = open(software_build_software_compilation_config, "w")
    f.write("{" + "\"code_model\"" + ": \"" + XCCMODEL + "" + "\", \"test_env\"" + ": \"" + TEST_ENV + "\"}")
    f.close()


    #toolchain
        #toolchain_build_built
        #Input:     federation/software/configs/coreip_e3.json
        #Input:

        #Output:
    cmdline                     = toolchain_build_toolchain     + " "\
                                    "--extra-input-config "     + TOOLCHAIN_CONFIG + " " \
                                    "--iof-input-config "       + firrtl_build_iof_json + " "\
                                    "--elaborated-config-json " + firrtl_build_elaborated_config_json + " " \
                                    "-o "                       + toolchain_build_dir
    os.system(cmdline)

        #toolchain_meminfo_built
        #Input:     build/coreip/firrtl/elaborated_config.json
        #Output:

    cmdline                     = BUILD_MEMINFO_LIB + " "\
                                    "--elaborated-config-json " + firrtl_build_elaborated_config_json + " " \
                                    "-o " + toolchain_build_meminfo_dir
    os.system(cmdline)

        #toolchain_hartinfo_built
    cmdline                     = BUILD_HARTINFO_LIB + " " + \
                                    "--elaborated-config-json " +  firrtl_build_elaborated_config_json + " " \
                                    "-o " + toolchain_build_hartinfo_dir




    #Sim dir
    if not os.path.isdir(sim_build_dir):
        os.makedirs(sim_build_dir)
    gen_config_sitest(sim_build_dir, metadata_build_dir, verilog_build_dir, memgen_build_dir, core_name, variable_table, "config.sitest")



    #rtl_json
    design                      = variable_table["MODEL"] + "." + variable_table["CONFIG"]
    verilog_build_design_dir    = os.path.join(verilog_build_dir, design)
    verilog_build_testbench_dir = os.path.join(verilog_build_dir, design + ".testbench")
    SIM_CLK_PERIOD              = "5.0"
    TB                          = variable_table["TB"]
    MODEL                       = variable_table["MODEL"]
    verilog_module_hier_json    = os.path.join(metadata_build_dir, "module_hier.json")
    test_indicator_module_name  = "SiFive_TLTestIndicator" #FIXME
    verif_design_info_sv_dir    = os.path.join(build_dir, "verif", "libraries", "design_info", "sv")
    #function call
    gen_rtl_json(verilog_build_design_dir, \
            verilog_build_testbench_dir, \
            sim_build_dir, \
            verif_design_info_sv_dir, \
            federation_root, \
            SIM_CLK_PERIOD, \
            TB, \
            test_indicator_module_name, \
            MODEL\
    )

    #CONFIG                      = "SiFiveCoreDesignerAlterations"
    #project_build_name          = "coreip_e31_fcd"
    #BREKER_HOME                 = "/sifive/tools/breker/treksoc/treksoc-4.3.21_20191120_64b_el6"
    #MODULE_BREKER_TREKSOC       = "breker/treksoc/4.3.21"
    #MODULE_BREKER_COHAPP        = "breker/coherencyTrekApp/1.0.22"
    #design_top_module_name      = "SiFive_CoreIPSubsystem"
    #TORTURE_FALSE_SHARING_GRANULARITY = "\'8\'"

    #config.sitest
    #gen_config_sitest(
    #    sim_build_dir,\
    #    CONFIG,\
    #    project_build_name,\
    #    file_index_json,\
    #    BREKER_HOME,\
    #    MODULE_BREKER_TREKSOC,\
    #    MODULE_BREKER_COHAPP,\
    #    design_top_module_name,\
    #    TORTURE_FALSE_SHARING_GRANULARITY,\
    #    SITEST_TESTBENCH_CONSTRUCTOR,\
    #    SITEST_BOOT_METHODS,\
    #    verilog_build_design_sitest,\
    #    verilog_build_testbench_sitest,\
    #    package_build_json_dependencies,\
    #    sim_build_rtl_json\
    #)

    sitest_exe          = os.path.join(federation_root, "sitest", "exe", "sitest")
    sitest_actual_exe   = os.path.join(federation_root, "sitest", "exe", "sitest.actual")
    coreip_e3_json      = variable_table["TOOLCHAIN_CONFIG"]
    soft_link(sim_build_dir, "sitest",          sitest_exe)
    soft_link(sim_build_dir, "sitest.actual",   sitest_actual_exe)
    soft_link(sim_build_dir, "toolchain.json",  coreip_e3_json)

if __name__== "__main__":
    main()
